import java.time.LocalDateTime;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;
import java.util.Random;
import java.util.stream.Collectors;

/**
 * This class simulates a simple model for creating "People" and managing them through a "BirthingUnit".
 */
public class CodeToReview {

    /**
     * Represents a person with a name and date of DOB.
     */
    public static class People {
    
        // Default DOB for under-16 logic (15 years ago from now)
        private static final OffsetDateTime UNDER_16 = OffsetDateTime.now().minusYears(15);

        private String name;
        private OffsetDateTime dob;

        /**
         * Creates a person assumed to be under 16 using default DOB.
         * 
         * @param name Name of the person
         */
        public People(String name) {
            this(name, UNDER_16.toLocalDateTime());
        }

        /**
         * Creates a person with a name and specific DOB.
         * Converts LocalDateTime to OffsetDateTime using system offset.
         * 
         * @param name Name of the person
         * @param dob Date of birth
         */
        public People(String name, LocalDateTime dob) {
            this.name = name;
            this.dob = dob.atOffset(OffsetDateTime.now().getOffset());
        }

        public String getName() {
            return name;
        }

        public OffsetDateTime getDob() {
            return dob;
        }
    }

    /**
     * Simulates a "Birthing Unit" that manages people creation and querying.
     */
    public static class BirthingUnit {

        private List<People> people;

        public BirthingUnit() {
            people = new ArrayList<>();
        }

        /**
         * Generates and returns a list of randomly created "People".
         * Names are randomly "Bob" or "Betty", and DOBs are randomized to simulate age between 18 to 85.
         *
         * @param count Number of people to create
         * @return List of People objects
         */
        public List<People> getPeople(int count) {
            Random random = new Random();  // Create the random generator once

            for (int j = 0; j < count; j++) {
                try {
                    // Randomly assign the name "Bob" or "Betty"
                    String name = random.nextInt(2) == 0 ? "Bob" : "Betty";

                    // Random age between 18 and 85 years
                    int ageInYears = 18 + random.nextInt(68); // 85 - 18 = 67 + 1
                    LocalDateTime dob = LocalDateTime.now().minusDays(ageInYears * 365L);

                    // Add new person to the list
                    people.add(new People(name, dob));
                } catch (Exception e) {
                    // Unlikely to happen, but we fail fast with meaningful error
                    throw new RuntimeException("Something failed in user creation", e);
                }
            }

            return people;
        }

        /**
         * Filters the list of "Bob"s, optionally filtering by age (>30).
         *
         * @param olderThan30 If true, only returns Bobs older than 30.
         * @return List of Bobs meeting the condition
         */
        private List<People> getBobs(boolean olderThan30) {
            OffsetDateTime cutoff = OffsetDateTime.now().minusYears(30);

            return people.stream()
                .filter(p -> "Bob".equals(p.getName()))
                .filter(p -> !olderThan30 || p.getDob().isBefore(cutoff))
                .collect(Collectors.toList());
        }

        /**
         * Combines a person's name with a last name to simulate marriage name.
         * Ignores last names containing "test"
         * Truncates the result if it exceeds 255 characters
         *
         * @param p        The person
         * @param lastName The new last name
         *
         * @return Combined name
         */
        public String getMarried(People p, String lastName) {
            if (lastName.contains("test")) {
                return p.getName(); // Ignore test names
            }

            String fullName = p.getName() + " " + lastName;

            return fullName.length() > 255 ? fullName.substring(0, 255) : fullName;
        }
    }
}
